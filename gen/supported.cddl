; this is a minimal example that tries to show all supported features

; pay attention to the @name comment placement as it can be finicky

; type alias
hash = bytes
; create a newtype around another type instead of an alias
special_hash = bytes ; @newtype
; or don't generate either and directly use the aliased type instead
hidden_hash = bytes ; @no_alias

hashes = [
  hash,
  special_hash,
  hidden_hash,
]

; size/length requirements on primitives
limitations = [
  ; integer restrictions that map to rust types are directly translated
  ; u8 in rust
  u_8: uint .size 1,
  ; u16 in rust
  u_16: uint .le 65535,
  ; u32, etc...
  u_32: 0..4294967295,
  u_64: uint .size 8,
  i_8: -128..127,
  i_64: int .size 8,
  ; you can also limit strings (text or bytes) to a specific length
  hash32: bytes .size 32,
  ; or to a range e.g. between 10 and 20 bytes
  bounded: text .size (10..20),
]

; array struct
foo = [
  ; all primitives are supported:
  ; e.g. uint, nint and int supported. int generates special code as no rust equivalent
  ; unnamed array fields try to derive name from type if possible
  int,
  ; text / bytes supported too
  ; or you can give them an explicit name like this
  name: text,
  ; as well as floats (without --preserve-encodings=true)
  fp: float64,
]

; mark as externally defined. user has to insert/import code for this type after generation
; so this file as a whole won't compile until you provide an ExternFoo that implements Serialize/Deserialize
extern_foo = _CDDL_CODEGEN_EXTERN_TYPE_

; map struct + tagged fields + .cbor + optional fields + constants + .default
bar = {
  ; fields can be tagged and this remains a serialization detail (hidden from API)
  foo: #6.1337(foo),
  ; they can also be encoded as CBOR bytes which remains a serialization detail (hidden from API)
  ; this can be combined with tags as well i.e. #6.42(bytes .cbor extern_foo)
  extern_foo: bytes .cbor extern_foo
  ; optional field (generates as Option<T>)
  ? derp: uint,
  ; type choice with null will result in Option<T> too for the API
  ; also, you can give explicit names that differ from the key value for maps like this:
  1 : uint / null, ; @name explicitly_named_1
  ; string constant (no field generated)
  5: "five",
  ; integer constant (no field generated)
  five: 5,
  ; this will not be an optional field in rust, as when it is not present, it will be set to 0
  ? 100: uint .default 0,
}

; basic groups are supported and have their own type
basic = (
  b: #6.23(uint),
  c: text,
)

; basic groups fully supported in array groups
outer = [
  a: uint,
  ; basic groups can be put into an array struct directly i.e. embed their fields into outer
  ; which is only a serialization detail. this field will be of type Basic
  embedded: basic,
  ; or you can embed them into a repeatable homogeneous array
  homogeneous_array: [* basic],
]

other_basic = (
  b: uint,
  c: uint,
)

; you can embed basic groups in maps, BUT deserialization will not be generated due to technical limitations
; LIMITATION: a single basic group cannot be put into both a map and an array group for serialization which is
;             why we had to define a separate one other_basic instead of just using basic
outer_map = {
  a: uint,
  embedded: other_basic,
}

table_arr_members = {
  ; you can directly define homogeneous maps as fields (or define them at top-level)
  tab: { * text => text },
  ; you can also define homogenous arrays as fields (or define them at top-level)
  arr: [*uint],
}

type_choice = 
    0              ; @name you
  / "hello world"  ; @name can
  / uint           ; @name name
  / text           ; @name variants
  / bytes          ; @name like
  / #6.64([*uint]) ; @name this
  / foo ; otherwise they try and take the variant name from the type e.g. Foo here

; if a type choice only has constants it will generate as a c-style enum (directly wasm-exposable)
c_style_enum =
    0 ; @name foo
  / 1 ; @name bar
  / 2 ; @name baz

group_choice = [
  ; @name these
  foo //
  ; if there is only one non-constant field in the inlined group then that will be inlined in the enum
  ; @name are
  0, x: uint //
  ; but if there are multiple then a new struct will be generated from this variant
  ; @name also
  1, x: uint, y: text //
  ; basic groups can be embedded into group choices, taking on the format of the outer group
  ; @name nameable
  basic
]

choices = [
  type_choice,
  c_style_enum,
  group_choice,
]